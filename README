# Projeto de Aprendizado: Django + PostgreSQL + AWS + Docker

Este é um projeto para aprender as principais tecnologias do desenvolvimento web moderno, criando uma aplicação simples com autenticação que roda em containers Docker e é deployada na AWS.

## 🎯 Objetivo
Criar uma página web simples com sistema de autenticação utilizando:
- **Python** com **Django**
- **PostgreSQL** como banco de dados
- **Docker** para containerização
- **AWS EC2** para hospedagem

## 💼 Arquitetura do Sistema (Escalável)

### 🎯 **Visão Geral**
Sistema multi-tenant projetado para **começar simples** e **escalar** para gestão completa de pizzarias.

### 📈 **Roadmap de Evolução**

#### **🚀 Fase 1 - MVP (Você está aqui)**
- ✅ Autenticação básica
- ✅ Cadastro de clientes
- ✅ Dashboard simples

#### **🏪 Fase 2 - Multi-Pizzaria**
- ✅ Cadastro de pizzarias
- ✅ Usuários vinculados a pizzarias
- ✅ Isolamento de dados por pizzaria

#### **🍕 Fase 3 - Gestão Completa**
- ✅ Cardápio por pizzaria
- ✅ Pedidos e entregas
- ✅ Relatórios financeiros
- ✅ Gestão de funcionários

### 🏗️ **Arquitetura Multi-Tenant**

```
Sistema Principal
├── Pizzaria A
│   ├── Funcionários (admin, operador)
│   ├── Clientes
│   ├── Cardápio
│   ├── Pedidos
│   └── Relatórios
├── Pizzaria B
│   ├── Funcionários
│   ├── Clientes
│   └── ...
└── Super Admin (gerencia tudo)
```

### 👥 **Tipos de Usuário (Arquitetura Final)**

#### **🔧 Super Admin (Você/Sistema)**
- ✅ Criar/gerenciar pizzarias
- ✅ Ver dados de todas as pizzarias
- ✅ Configurações globais do sistema

#### **👑 Admin Pizzaria (Dono/Gerente)**
- ✅ Gerenciar **SUA** pizzaria
- ✅ Cadastrar funcionários da pizzaria
- ✅ Cadastrar clientes da pizzaria
- ✅ Ver relatórios da pizzaria
- ❌ **NÃO** vê dados de outras pizzarias

#### **👨‍💼 Funcionário Pizzaria**
- ✅ Cadastrar clientes da pizzaria
- ✅ Fazer pedidos
- ✅ Ver cardápio da pizzaria
- ❌ **NÃO** acessa relatórios/configurações

#### **👤 Cliente**
- ✅ Fazer pedidos
- ✅ Ver histórico próprio
- ❌ **NÃO** acessa gestão

### 🎯 **Funcionalidades MVP (Fase 1) - Super Simples**

**Apenas 2 tipos de usuário:**

#### **🔧 Super Admin (Você):**
- ✅ Login/Logout
- ✅ **Cadastrar pizzarias**
- ✅ **Listar pizzarias cadastradas**
- ✅ Dashboard administrativo
- ✅ Gerenciar sistema completo

#### **🍕 Usuário Pizzaria (Dono da Pizzaria):**
- ✅ Login/Logout
- ✅ **Interface de boas-vindas simples**
- ✅ Ver dados da sua pizzaria
- ❌ (Funcionalidades avançadas virão nas próximas fases)

> **📝 Fluxo**: Você cadastra uma pizzaria → Cria login para o dono → Dono acessa e vê boas-vindas

### 🔄 **Preparação para Escalabilidade**

**Modelos preparados para crescer:**
- `User` → Usuário base (Django)
- `Pizzaria` → Tenant principal 
- `UsuarioPizzaria` → Relaciona usuário + pizzaria + papel
- `Cliente` → Pertence a uma pizzaria específica

> **💡 Estratégia**: Começamos com 1 pizzaria padrão, depois permitimos criar múltiplas!

## 📋 Pré-requisitos

Antes de começar, você precisa ter instalado:
- [ ] Python 3.8+
- [ ] Git
- [ ] Docker e Docker Compose
- [ ] Conta na AWS
- [ ] Editor de código (VS Code, PyCharm, etc.)

## 🚀 Passo a Passo

### Fase 1: Preparação do Ambiente Local

#### 1. Criar ambiente virtual Python
```bash
# Criar ambiente virtual
python -m venv venv

# Ativar no Windows
venv\Scripts\activate

# Ativar no Linux/Mac
source venv/bin/activate
```

#### 2. Instalar Django e dependências
```bash
pip install django psycopg2-binary python-decouple
pip freeze > requirements.txt
```

### Fase 2: Criação do Projeto Django

#### 3. Criar projeto Django
```bash
# Criar projeto na pasta atual (note o ponto!)
django-admin startproject meu_projeto .

# Criar app (manage.py está na pasta atual, NÃO entrar em meu_projeto/)
python manage.py startapp autenticacao
```

#### 4. Configurar settings.py
- [x] Adicionar o app 'autenticacao' em INSTALLED_APPS
- [x] Configurar conexão com PostgreSQL
- [x] Configurar variáveis de ambiente com python-decouple
- [] Configurar ALLOWED_HOSTS para produção

#### 5. Criar modelos de dados (MVP Simplificado)
- [x] Criar modelo **Pizzaria** (dados básicos da pizzaria)
- [x] Criar modelo **UsuarioPizzaria** (relaciona usuário com pizzaria)
- [x] Definir apenas 2 papéis: 'super_admin' e 'dono_pizzaria'
- [x] Configurar relacionamentos básicos
- [ ] ~~Criar modelo Cliente~~ (não precisa na Fase 1)

#### 6. Criar views de autenticação e gestão (MVP)
- [x] Criar página de login
- [x] Criar no super usuario um jeito de cadastrar usuario do sistema
- [x] Criar dashboard do Super Admin (você)
- [x] Criar página de **cadastro de pizzaria** (só super admin)
- [x] Criar página de **lista de pizzarias** (só super admin)
- [x] Criar **interface de boas-vindas** (dono da pizzaria)
- [x] Configurar URLs
- [x] Implementar decorador @super_admin_required

#### 6. Criar ferramentas de gestão para o dono da pizzaria.
- [x] Criar tela de Ingredientes
- [x] Criar tela de formulario para adicionar Novo Ingrediente
- [x] Criar banco de dados para os Ingredientes
- [x] Criar Tela de Produtos
- [x] Adicionar novo produtos

#### 9. Executar migrações
```bash
python manage.py makemigrations
python manage.py migrate
python manage.py createsuperuser
```

### Fase 4: Containerização com Docker

#### 10. Criar Dockerfile
- [ ] Criar Dockerfile para a aplicação Django
- [ ] Definir imagem base Python
- [ ] Instalar dependências
- [ ] Configurar entrypoint

#### 11. Criar docker-compose.yml
- [ ] Serviço para aplicação Django
- [ ] Serviço para PostgreSQL
- [ ] Configurar volumes
- [ ] Configurar redes
- [ ] Configurar variáveis de ambiente

#### 12. Testar localmente
```bash
docker-compose up --build
```

### Fase 5: Deploy na AWS EC2

#### 13. Preparar instância EC2
- [ ] Criar instância EC2 (Ubuntu/Amazon Linux)
- [ ] Configurar Security Groups (portas 22, 80, 443)
- [ ] Conectar via SSH
- [ ] Instalar Docker e Docker Compose na instância

#### 14. Transferir código para EC2
- [ ] Configurar repositório Git
- [ ] Clonar projeto na instância EC2
- [ ] Configurar variáveis de ambiente de produção

#### 15. Executar na produção
```bash
# Na instância EC2
docker-compose -f docker-compose.prod.yml up -d
```

### Fase 6: Configurações de Produção

#### 16. Configurar domínio (opcional)
- [ ] Registrar domínio
- [ ] Configurar DNS apontando para o IP da EC2
- [ ] Configurar SSL com Let's Encrypt

#### 17. Configurar backup do banco
- [ ] Script de backup automático
- [ ] Armazenamento no S3

## 📁 Estrutura Final do Projeto
```
meu_projeto/
├── meu_projeto/
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── autenticacao/
│   ├── templates/
│   │   ├── login.html
│   │   ├── dashboard_super_admin.html    # Você - cadastrar/listar pizzarias
│   │   ├── cadastro_pizzaria.html        # Formulário cadastro pizzaria
│   │   ├── lista_pizzarias.html          # Lista todas as pizzarias
│   │   └── boas_vindas_pizzaria.html     # Interface do dono da pizzaria
│   ├── views.py
│   ├── urls.py
│   ├── models.py       # Pizzaria, UsuarioPizzaria (só 2 papéis)
│   └── decorators.py   # @super_admin_required
├── templates/
│   └── base.html
├── static/
├── Dockerfile
├── docker-compose.yml
├── docker-compose.prod.yml
├── requirements.txt
├── .env
└── README.md
```

## 🔧 Comandos Úteis

### Django
```bash
# Executar servidor local
python manage.py runserver

# Criar migrações
python manage.py makemigrations

# Aplicar migrações
python manage.py migrate

# Criar superusuário
python manage.py createsuperuser
```

### Docker
```bash
# Construir e executar
docker-compose up --build

# Executar em background
docker-compose up -d

# Ver logs
docker-compose logs

# Parar containers
docker-compose down
```

### AWS
```bash
# Conectar via SSH
ssh -i sua-chave.pem ubuntu@ip-da-instancia

# Copiar arquivos via SCP
scp -i sua-chave.pem arquivo.txt ubuntu@ip-da-instancia:~/
```

## 📚 Recursos para Aprendizado

### Documentação Oficial
- [Django Documentation](https://docs.djangoproject.com/)
- [PostgreSQL Documentation](https://www.postgresql.org/docs/)
- [Docker Documentation](https://docs.docker.com/)
- [AWS EC2 Documentation](https://docs.aws.amazon.com/ec2/)

### Tutoriais Recomendados
- Django Tutorial Oficial
- Docker para Iniciantes
- AWS EC2 Getting Started

## ❓ Checklist de Conclusão (MVP Simplificado)

### Desenvolvimento Local
- [ ] Projeto Django criado e funcionando localmente
- [ ] Modelos **Pizzaria** e **UsuarioPizzaria** criados
- [ ] Sistema de autenticação implementado
- [ ] 2 tipos de usuário funcionando: super_admin e dono_pizzaria
- [ ] PostgreSQL configurado e conectado
- [ ] Dashboard **Super Admin** funcionando
- [ ] **Cadastro de pizzarias** (só super admin) funcionando
- [ ] **Lista de pizzarias** (só super admin) funcionando
- [ ] **Interface de boas-vindas** (dono pizzaria) funcionando

### Docker e Deploy
- [ ] Aplicação rodando em Docker localmente
- [ ] Deploy realizado com sucesso na AWS EC2
- [ ] Sistema completo funcionando na produção

### Testes de Funcionalidade (MVP)
- [ ] Super Admin consegue fazer login
- [ ] Super Admin consegue **cadastrar pizzarias**
- [ ] Super Admin consegue **ver lista de pizzarias**
- [ ] Dono da pizzaria consegue fazer login
- [ ] Dono da pizzaria vê **interface de boas-vindas da SUA pizzaria**
- [ ] Sistema de logout funciona para ambos perfis
- [ ] **Isolamento**: Dono só vê dados da própria pizzaria
- [ ] **Permissões**: Dono não acessa funcionalidades de super admin

## 🆘 Onde Buscar Ajuda

1. **Documentação oficial** das tecnologias
2. **Stack Overflow** para problemas específicos
3. **GitHub** para exemplos de código
4. **YouTube** para tutoriais visuais
5. **Reddit** (r/django, r/aws) para discussões

---

## 📝 Anotações e Dúvidas

Use este espaço para anotar suas dúvidas e descobertas durante o desenvolvimento:

### Dúvidas Frequentes
- Como configurar variáveis de ambiente?
- Qual a diferença entre settings de desenvolvimento e produção?
- Como debuggar problemas no Docker?
- Como configurar HTTPS na AWS?

## 🏗️ Arquitetura dos Modelos (Detalhada)

### 🎯 **Estratégia de Escalabilidade**

**MVP (Fase 1)**: 1 pizzaria padrão + autenticação básica  
**Futuro (Fase 2+)**: N pizzarias independentes

### 📊 **Modelos Principais**

#### **1. Pizzaria (Tenant)**
```python
class Pizzaria(models.Model):
    nome = models.CharField(max_length=100)
    cnpj = models.CharField(max_length=14, unique=True)
    endereco = models.TextField()
    telefone = models.CharField(max_length=15)
    ativa = models.BooleanField(default=True)
    criada_em = models.DateTimeField(auto_now_add=True)
    
    # Futuro: configurações específicas da pizzaria
    # cor_tema, logo, configurações_delivery, etc.
```

#### **2. UsuarioPizzaria (MVP - Só 2 Papéis)**
```python
class UsuarioPizzaria(models.Model):
    PAPEIS = [
        ('super_admin', 'Super Admin'),           # Você (cadastra pizzarias)
        ('dono_pizzaria', 'Dono da Pizzaria'),    # Dono - só vê boas-vindas
    ]
    
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    pizzaria = models.ForeignKey(Pizzaria, on_delete=models.CASCADE, null=True, blank=True)  # Super admin não tem pizzaria específica
    papel = models.CharField(max_length=20, choices=PAPEIS)
    ativo = models.BooleanField(default=True)
    criado_em = models.DateTimeField(auto_now_add=True)
```

#### **3. Cliente (Futuras Fases)**
```python
# ⏭️ NÃO IMPLEMENTAR AGORA - só nas próximas fases
# class Cliente(models.Model):
#     pizzaria = models.ForeignKey(Pizzaria, on_delete=models.CASCADE)
#     nome = models.CharField(max_length=100)
#     # ... outros campos virão depois
```

### 🔐 **Sistema de Permissões (MVP)**

#### **Views do Super Admin:**
```python
# views.py - Só você pode cadastrar pizzarias
@super_admin_required
def cadastrar_pizzaria(request):
    # Só super_admin acessa
    if request.method == 'POST':
        # Criar pizzaria + usuário dono
        pass
    return render(request, 'cadastro_pizzaria.html')

@super_admin_required  
def listar_pizzarias(request):
    pizzarias = Pizzaria.objects.all()  # Super admin vê todas
    return render(request, 'lista_pizzarias.html', {'pizzarias': pizzarias})
```

#### **Views do Dono da Pizzaria:**
```python
# views.py - Dono só vê boas-vindas da SUA pizzaria
@dono_pizzaria_required
def boas_vindas(request):
    user_pizzaria = request.user.usuariopizzaria_set.first()
    pizzaria = user_pizzaria.pizzaria  # Sua pizzaria específica
    return render(request, 'boas_vindas_pizzaria.html', {'pizzaria': pizzaria})
```

#### **Decoradores de Permissão:**
```python
# decorators.py
def super_admin_required(view_func):
    def wrapper(request, *args, **kwargs):
        if not request.user.usuariopizzaria_set.filter(papel='super_admin').exists():
            return redirect('login')
        return view_func(request, *args, **kwargs)
    return wrapper

def dono_pizzaria_required(view_func):
    def wrapper(request, *args, **kwargs):
        if not request.user.usuariopizzaria_set.filter(papel='dono_pizzaria').exists():
            return redirect('login')
        return view_func(request, *args, **kwargs)
    return wrapper
```

### 🚀 **Evolução do Sistema**

#### **Hoje (MVP Super Simples):**
```python
# Você é o super admin (criado uma vez)
UsuarioPizzaria.objects.create(
    usuario=voce,  # seu usuário
    pizzaria=None,  # Super admin não tem pizzaria específica
    papel='super_admin'
)

# Quando você cadastra uma pizzaria:
nova_pizzaria = Pizzaria.objects.create(
    nome="Pizza do João",
    cnpj="12345678000199",
    endereco="Rua A, 123",
    telefone="11999999999"
)

# E cria o usuário dono da pizzaria:
UsuarioPizzaria.objects.create(
    usuario=novo_dono,
    pizzaria=nova_pizzaria,
    papel='dono_pizzaria'
)
```

#### **Futuro (Funcionalidades Avançadas):**
```python
# Pizzaria pode ter funcionários
UsuarioPizzaria.objects.create(
    usuario=funcionario,
    pizzaria=pizzaria_joao,
    papel='funcionario'
)

# Pizzaria pode ter clientes
Cliente.objects.create(
    pizzaria=pizzaria_joao,
    nome="Cliente A",
    telefone="11888888888"
)

# E muito mais: cardápio, pedidos, relatórios...
```

### 💡 **Vantagens desta Arquitetura**

✅ **Escalabilidade**: Fácil adicionar novas pizzarias  
✅ **Isolamento**: Dados de uma pizzaria não vaza para outra  
✅ **Flexibilidade**: Diferentes papéis por pizzaria  
✅ **MVP Simples**: Começa com 1 pizzaria, cresce naturalmente  
✅ **Futuro-proof**: Preparado para features avançadas  

### Próximos Passos (Após completar o projeto básico)
- [ ] Implementar testes automatizados
- [ ] Adicionar CI/CD com GitHub Actions
- [ ] Configurar monitoramento e logs
- [ ] Implementar cache com Redis
- [ ] Adicionar CDN para arquivos estáticos
- [ ] **Evoluir para multi-pizzaria** 🍕

---

## 🎯 **Resumo do MVP (Para não esquecer)**

### **O que você vai construir:**

**2 funcionalidades principais:**

#### **1. Você (Super Admin):**
- ✅ Faz login no sistema
- ✅ Acessa dashboard administrativo
- ✅ **Cadastra pizzarias** com dados básicos (nome, CNPJ, endereço, telefone)
- ✅ **Lista todas as pizzarias** cadastradas
- ✅ Cria usuários "dono da pizzaria" para cada pizzaria

#### **2. Dono da Pizzaria:**
- ✅ Recebe login/senha que você criou
- ✅ Faz login no sistema
- ✅ Vê **interface de boas-vindas simples** 
- ✅ Visualiza **dados da SUA pizzaria**
- ❌ **NÃO** vê outras pizzarias
- ❌ **NÃO** pode cadastrar novas pizzarias

### **Fluxo completo:**
```
1. Você cria o projeto e vira super admin
2. Você cadastra "Pizzaria do João" 
3. Sistema cria usuário "joao" (dono da pizzaria)
4. João faz login e vê: "Bem-vindo à Pizzaria do João!"
5. Você cadastra "Pizzaria da Maria"
6. Sistema cria usuário "maria" (dona da pizzaria)  
7. Maria faz login e vê: "Bem-vindo à Pizzaria da Maria!"
8. João NÃO vê dados da Maria, e vice-versa
```

### **Tecnologias:**
- **Django** (web framework)
- **PostgreSQL** (banco de dados)
- **Docker** (containers)
- **AWS EC2** (hospedagem)

**Simples, escalável e funcional!** 🚀

---

*Lembre-se: o objetivo é APRENDER! Não tenha pressa, entenda cada passo antes de prosseguir.*
